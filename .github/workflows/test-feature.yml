name: Test Feature
run-name: Test, build, and deploy '${{ github.head_ref }}' (${{ github.sha }}) to staging environment

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    if: |
      startsWith(github.head_ref, 'blog/') == false &&
      startsWith(github.head_ref, 'dependabot/') == false &&
      contains(github.head_ref, '/skip-ci') == false
    timeout-minutes: 60
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Cache dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Run linter
        run: npm run lint
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npm run test
      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
          overwrite: true
  build:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ needs.test.result == 'success' }}
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Cache dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Build
        env:
          PUBLIC_CONFIGS: /configs.json
        run: npm run build
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: astro-build
          path: dist/
          retention-days: 7
          if-no-files-found: error
          overwrite: true
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.result == 'success' }}
    environment: staging
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Cache dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Assume AWS role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Deploy Terraform
        id: deploy-terraform
        uses: ./.github/actions/deploy-terraform
        with:
          s3-bucket-name: ${{ vars.TF_REMOTE_STATE_S3_BUCKET }}
          dynamodb-table-name: ${{ vars.TF_REMOTE_STATE_DYNAMODB_TABLE }}
          account-id: ${{ secrets.AWS_ACCOUNT_ID }}
          aws-region: ${{ vars.AWS_REGION }}
          domain-name: ${{ vars.DOMAIN_NAME }}
          is-production: false
          environment: ${{ vars.STAGE }}
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: astro-build
          path: ${{ github.workspace }}/dist
      - name: Deploy build artifact
        uses: ./.github/actions/deploy-code
        with:
          s3-bucket-name: ${{ steps.deploy-terraform.outputs.s3-bucket-name }}
          dynamodb-blog-table-name: ${{ steps.deploy-terraform.outputs.dynamodb-blog-table-name }}
          dynamodb-tag-table-name: ${{ steps.deploy-terraform.outputs.dynamodb-tag-table-name }}
          cloudfront-distribution-id: ${{ steps.deploy-terraform.outputs.cloudfront-distribution-id }}
          api-endpoint: ${{ steps.deploy-terraform.outputs.api-endpoint }}
          is-production: false
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Staging deployed: https://${{ steps.deploy-terraform.outputs.app-url }}`})
