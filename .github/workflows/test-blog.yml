name: Check new blog post

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  test:
    if: |
      startsWith(github.head_ref, 'blog/') &&
      contains(github.ref, '/skip-ci') == false
    timeout-minutes: 60
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check changed files
        run: |
          echo event before ${{ github.event.before }}
          echo sha ${{ github.sha }}
          git diff --name-only ${{ github.event.before }} origin/main
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: lts/*
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #     - name: Assume AWS role
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
  #         aws-region: ${{ vars.AWS_REGION }}
  #     - name: Validate tag
  #       uses: ./.github/actions/validate-tag
  #       with:
  #         s3-bucket-name: ${{ vars.TF_REMOTE_STATE_S3_BUCKET }}
  #         dynamodb-table-name: ${{ vars.TF_REMOTE_STATE_DYNAMODB_TABLE }}
  #         account-id: ${{ secrets.AWS_ACCOUNT_ID }}
  #         aws-region: ${{ vars.AWS_REGION }}
  #         environment: ${{ vars.STAGE }}
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Run linter
  #       run: npm run lint
  #     - name: Install Playwright Browsers
  #       run: npx playwright install --with-deps
  #     - name: Run Playwright tests
  #       run: npm run test
  # build:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   if: ${{ needs.test.result == 'success' }}
  #   environment: prod
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 2
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: lts/*
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Build
  #       run: npm run build
  #     - name: Get slug
  #       id: get_slug
  #       run: |
  #         echo "SLUG=${GITHUB_HEAD_REF#blog/}" >> "$GITHUB_OUTPUT"
  #     - name: Upload build artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: astro-build-blog
  #         path: dist/blog/${{ steps.get_slug.outputs.SLUG }}
  #         retention-days: 7
  #         if-no-files-found: error
  #         overwrite: true
