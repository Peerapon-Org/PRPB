name: Deploy new feature to production environment

on:
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  deploy:
    if: startsWith(github.head_ref, 'feature/') && github.event.pull_request.merged == true
    timeout-minutes: 60
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Assume AWS role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: astro-build-${{ github.event.pull_request.number }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: ${{ github.workspace }}/terraform/assets/dist
      - name: Deploy Terraform
        uses: ./.github/actions/deploy-terraform
        with:
          s3-bucket-name: ${{ vars.TF_REMOTE_STATE_S3_BUCKET }}
          dynamodb-table-name: ${{ vars.TF_REMOTE_STATE_DYNAMODB_TABLE }}
          account-id: ${{ secrets.AWS_ACCOUNT_ID }}
          aws-region: ${{ vars.AWS_REGION }}
          is-production: true
          environment: prod
  terminate:
    if: ${{ needs.deploy.result == 'success' }}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: deploy
    environment: staging
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Assume AWS role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Destroy Staging Terraform
        uses: ./.github/actions/destroy-terraform
        with:
          s3-bucket-name: ${{ vars.TF_REMOTE_STATE_S3_BUCKET }}
          dynamodb-table-name: ${{ vars.TF_REMOTE_STATE_DYNAMODB_TABLE }}
          account-id: ${{ secrets.AWS_ACCOUNT_ID }}
          aws-region: ${{ vars.AWS_REGION }}
          environment: staging
